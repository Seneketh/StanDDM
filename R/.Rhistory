#            as.numeric(dates == floor_date(dates, week_start = 1, unit = 'month'))) %>%
mutate(maintanence = rbinom(length(dates),1,0.1)) %>%
mutate(sale = rbinom(length(dates),1,0.3)) %>%
mutate(covariate = rep(covariate[1:length(dates)], 2)) %>%
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
covariate[1:length(dates)]
length(covariate[1:length(dates)])
length(date())
length(dates
)
(length(dates)/2)
incrementdat %>% rename(Increments = dat) %>%
mutate(Source = as.factor(Source)) %>%
mutate(label = replace(label, is.na(label), 0)) %>%
mutate(difference = rep(Increments[Source=='A']-Increments[Source=='B'], 2)) %>%
mutate(weekday = wday(dates)) %>%
mutate(is_week_start =
as.numeric(dates == floor_date(dates, week_start = 1, unit = 'week'))) %>%
# mutate(is_month_start =
#            as.numeric(dates == floor_date(dates, week_start = 1, unit = 'month'))) %>%
mutate(maintanence = rbinom(length(dates),1,0.1)) %>%
mutate(sale = rbinom(length(dates),1,0.3)) %>%
mutate(covariate = rep(covariate[1:(length(dates)/2)], 2)) %>%
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
library(randomForest)
fit <- randomForest(as.factor(label) ~ Source+Increments+weekday+is_week_start+maintanence+sale,
data = incrementdat,
importance=TRUE,
ntree=5000)
options(width=999)
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
fig.height = 8,
fig.width = 12,
message = FALSE,
warning = FALSE,
comment = NA,
out.width='1000px',
dev = "png",
dpi=200
)
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); library(tidyverse)}
if(!require("lubridate")){install.packages("lubridate", dependencies = TRUE); library(lubridate)}
if(!require("magrittr")){install.packages("magrittr", dependencies = TRUE); library(magrittr)}
if(!require("knitr")){install.packages("knitr", dependencies = TRUE); library(knitr)}
if(!require("kableExtra")){install.packages("kableExtra", dependencies = TRUE); library(kableExtra)}
theme_set(theme_bw(base_size = 12))
#simulate vector of dates, 1 year, remove weekends
dates <- seq(as.Date('2018-01-01'),as.Date('2019-01-01'),by = 1) %>%
enframe(name = NULL) %>%
mutate(weekday = wday(value, label=TRUE)) %>%
filter(!wday(value) %in% c(1, 7)) %>%
pull(value)
time <- length(dates) #determine amount of days (timesteps)
#code is unfortuantely unvectorized :(
# Stochastic process stock simulation for stock X
Z <- rnorm(time-1,0,1)   # Random normally distributed direction of drift, mean = 0, stdv = 1
u <- 0.3              # Expected annual return (30%)
sd <- 0.2             # Expected annual standard deviation (20%)
s <- 100              # Starting price
oridat <- c(s)         # Price vector
a <- 2                # See below
t <- 1:time            # Time. Days to put on the x axis in sequence
for(i in Z){
S = s + s*(u/time + sd/sqrt(time)*i) #stochastic diffusion
oridat[a] <- S
s = S
a = a + 1
}
#simulate slight alterations during 3 sequences
altdat <- oridat #create copy of original simulation
altdat[33:45] <- unlist(map(altdat[33:45], ~.x+rnorm(1)*rnorm(1)))
altdat[100:120] <- unlist(map(altdat[100:120], ~.x+rnorm(1)*rnorm(1)))
altdat[220:230] <- unlist(map(altdat[220:230], ~.x+rnorm(1)*rnorm(1)))
#unify original simulation with altered copy and add dates in frame:
dat <- tibble(A = oridat, B = altdat, dates) %>%
gather(key=Source, value = dat, -dates) #convert to tidy long format
ggplot(data=dat, aes(x=dates, y=dat, color=Source)) +
geom_line() +
xlab("Time [days]") +
ylab("Price") +
ggtitle("Raw Price Comparison") +
theme(legend.position="bottom")
head(tibble(A = oridat, B = altdat, dates)) %>% #show both stocks side by side plus dates
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F))
tibble(A = oridat, B = altdat, dates) %>%
gather(key=Source, value = dat, -dates) %>% #!
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
#calculate the difference between both t
diffdat <- tibble(Difference = diff(oridat)-diff(altdat),
dates = dates[1:length(Difference)])
incrementdat <- tibble(A = diff(oridat),
B = diff(altdat),
dates = dates[1:length(B)]) %>%
gather(key=Source, value = dat,-dates)
#create vector from differences for supervised learning
incrementdat$label <- diffdat %>%
mutate(label = as.numeric(Difference!=0), #label creation here
label = ifelse(label==0, NA, 1)) %>%
pull(label)
ggplot(data=incrementdat, aes(x=dates, y=dat, color=Source)) +
geom_line() +
xlab("Time [days]") +
ylab("Price Increment") +
ggtitle("Increments per Timepoint Comparison") +
theme(legend.position="bottom") +
geom_line(shape=15, data = incrementdat,
aes(y = label-5), col= 'red', fill= 'red', size = 2) +
annotate("text", x = as.Date('2018-01-01'), y = -4, label = "Target:", size = 5 )
ggplot(data=diffdat, aes(x=dates, y=Difference)) +
geom_line() +
xlab("Time [days]") +
ylab("Price Increment") +
ggtitle("Differences between increments for determining target timepoints") +
theme(legend.position="bottom")
incrementdat %>% rename(Increments = dat) %>%
mutate(Source = as.factor(Source)) %>%
mutate(label = replace(label, is.na(label), 0)) %>%
mutate(difference = rep(Increments[Source=='A']-Increments[Source=='B'], 2)) %>%
mutate(weekday = wday(dates)) %>%
mutate(is_week_start =
as.numeric(dates == floor_date(dates, week_start = 1, unit = 'week'))) %>%
# mutate(is_month_start =
#            as.numeric(dates == floor_date(dates, week_start = 1, unit = 'month'))) %>%
mutate(maintanence = rbinom(length(dates),1,0.1)) %>%
mutate(sale = rbinom(length(dates),1,0.3)) %>%
mutate(covariate = rep(covariate[1:(length(dates)/2)], 2)) %>%
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
incrementdat %<>% rename(Increments = dat) %>%
mutate(Source = as.factor(Source)) %>%
mutate(label = replace(label, is.na(label), 0)) %>%
mutate(difference = rep(Increments[Source=='A']-Increments[Source=='B'], 2)) %>%
mutate(weekday = wday(dates)) %>%
mutate(is_week_start =
as.numeric(dates == floor_date(dates, week_start = 1, unit = 'week'))) %>%
# mutate(is_month_start =
#            as.numeric(dates == floor_date(dates, week_start = 1, unit = 'month'))) %>%
mutate(maintanence = rbinom(length(dates),1,0.1)) %>%
mutate(sale = rbinom(length(dates),1,0.3)) %>%
mutate(covariate = rep(covariate[1:(length(dates)/2)], 2))
incrementdat %>%
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
library(randomForest)
fit <- randomForest(as.factor(label) ~ Source+Increments+weekday+is_week_start+maintanence+sale,
data = incrementdat,
importance=TRUE,
ntree=5000)
varImpPlot(fit)
library(randomForest)
fit <- randomForest(as.factor(label) ~ Source+weekday+is_week_start+maintanence+sale,
data = incrementdat,
importance=TRUE,
ntree=5000)
varImpPlot(fit)
library(randomForest)
fit <- randomForest(as.factor(label) ~ Source+weekday+is_week_start+maintanence+sale,
data = incrementdat,
importance=TRUE,
ntree=5000)
varImpPlot(fit)
options(width=999)
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
fig.height = 8,
fig.width = 12,
message = FALSE,
warning = FALSE,
comment = NA,
out.width='1000px',
dev = "png",
dpi=200
)
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); library(tidyverse)}
if(!require("lubridate")){install.packages("lubridate", dependencies = TRUE); library(lubridate)}
if(!require("magrittr")){install.packages("magrittr", dependencies = TRUE); library(magrittr)}
if(!require("knitr")){install.packages("knitr", dependencies = TRUE); library(knitr)}
if(!require("kableExtra")){install.packages("kableExtra", dependencies = TRUE); library(kableExtra)}
theme_set(theme_bw(base_size = 12))
#simulate vector of dates, 1 year, remove weekends
dates <- seq(as.Date('2018-01-01'),as.Date('2019-01-01'),by = 1) %>%
enframe(name = NULL) %>%
mutate(weekday = wday(value, label=TRUE)) %>%
filter(!wday(value) %in% c(1, 7)) %>%
pull(value)
time <- length(dates) #determine amount of days (timesteps)
#code is unfortuantely unvectorized :(
# Stochastic process stock simulation for stock X
Z <- rnorm(time-1,0,1)   # Random normally distributed direction of drift, mean = 0, stdv = 1
u <- 0.3              # Expected annual return (30%)
sd <- 0.2             # Expected annual standard deviation (20%)
s <- 100              # Starting price
oridat <- c(s)         # Price vector
a <- 2                # See below
t <- 1:time            # Time. Days to put on the x axis in sequence
for(i in Z){
S = s + s*(u/time + sd/sqrt(time)*i) #stochastic diffusion
oridat[a] <- S
s = S
a = a + 1
}
#simulate slight alterations during 3 sequences
altdat <- oridat #create copy of original simulation
altdat[33:45] <- unlist(map(altdat[33:45], ~.x+rnorm(1)*rnorm(1)))
altdat[100:120] <- unlist(map(altdat[100:120], ~.x+rnorm(1)*rnorm(1)))
altdat[220:230] <- unlist(map(altdat[220:230], ~.x+rnorm(1)*rnorm(1)))
#unify original simulation with altered copy and add dates in frame:
dat <- tibble(A = oridat, B = altdat, dates) %>%
gather(key=Source, value = dat, -dates) #convert to tidy long format
ggplot(data=dat, aes(x=dates, y=dat, color=Source)) +
geom_line() +
xlab("Time [days]") +
ylab("Price") +
ggtitle("Raw Price Comparison") +
theme(legend.position="bottom")
head(tibble(A = oridat, B = altdat, dates)) %>% #show both stocks side by side plus dates
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F))
tibble(A = oridat, B = altdat, dates) %>%
gather(key=Source, value = dat, -dates) %>% #!
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
#calculate the difference between both t
diffdat <- tibble(Difference = diff(oridat)-diff(altdat),
dates = dates[1:length(Difference)])
incrementdat <- tibble(A = diff(oridat),
B = diff(altdat),
dates = dates[1:length(B)]) %>%
gather(key=Source, value = dat,-dates)
#create vector from differences for supervised learning
incrementdat$label <- diffdat %>%
mutate(label = as.numeric(Difference!=0), #label creation here
label = ifelse(label==0, NA, 1)) %>%
pull(label)
ggplot(data=incrementdat, aes(x=dates, y=dat, color=Source)) +
geom_line() +
xlab("Time [days]") +
ylab("Price Increment") +
ggtitle("Increments per Timepoint Comparison") +
theme(legend.position="bottom") +
geom_line(shape=15, data = incrementdat,
aes(y = label-5), col= 'red', fill= 'red', size = 2) +
annotate("text", x = as.Date('2018-01-01'), y = -4, label = "Target:", size = 5 )
ggplot(data=diffdat, aes(x=dates, y=Difference)) +
geom_line() +
xlab("Time [days]") +
ylab("Price Increment") +
ggtitle("Differences between increments for determining target timepoints") +
theme(legend.position="bottom")
incrementdat %<>% rename(Increments = dat) %>%
mutate(Source = as.factor(Source)) %>%
mutate(label = replace(label, is.na(label), 0)) %>%
mutate(difference = rep(Increments[Source=='A']-Increments[Source=='B'], 2)) %>%
mutate(weekday = wday(dates)) %>%
mutate(is_week_start =
as.numeric(dates == floor_date(dates, week_start = 1, unit = 'week'))) %>%
# mutate(is_month_start =
#            as.numeric(dates == floor_date(dates, week_start = 1, unit = 'month'))) %>%
mutate(maintanence = rbinom(length(dates),1,0.1)) %>%
mutate(sale = rbinom(length(dates),1,0.3)) %>%
mutate(covariate = rep(covariate[1:(length(dates)/2)], 2))
incrementdat %>%
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
library(randomForest)
fit <- randomForest(as.factor(label) ~ Source+weekday+is_week_start+maintanence+sale,
data = incrementdat,
importance=TRUE,
ntree=5000)
varImpPlot(fit)
options(width=999)
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
fig.height = 8,
fig.width = 12,
message = FALSE,
warning = FALSE,
comment = NA,
out.width='1000px',
dev = "png",
dpi=200
)
if(!require("tidyverse")){install.packages("tidyverse", dependencies = TRUE); library(tidyverse)}
if(!require("lubridate")){install.packages("lubridate", dependencies = TRUE); library(lubridate)}
if(!require("magrittr")){install.packages("magrittr", dependencies = TRUE); library(magrittr)}
if(!require("knitr")){install.packages("knitr", dependencies = TRUE); library(knitr)}
if(!require("kableExtra")){install.packages("kableExtra", dependencies = TRUE); library(kableExtra)}
theme_set(theme_bw(base_size = 12))
#simulate vector of dates, 1 year, remove weekends
dates <- seq(as.Date('2018-01-01'),as.Date('2019-01-01'),by = 1) %>%
enframe(name = NULL) %>%
mutate(weekday = wday(value, label=TRUE)) %>%
filter(!wday(value) %in% c(1, 7)) %>%
pull(value)
time <- length(dates) #determine amount of days (timesteps)
#code is unfortunately not vectorized :(
# Stochastic process stock simulation for stock X
Z <- rnorm(time-1,0,1)   # Random normally distributed direction of drift, mean = 0, stdv = 1
u <- 0.3              # Expected annual return (30%)
sd <- 0.2             # Expected annual standard deviation (20%)
s <- 100              # Starting price
oridat <- c(s)         # Price vector
a <- 2                # See below
t <- 1:time            # Time. Days to put on the x axis in sequence
for(i in Z){
S = s + s*(u/time + sd/sqrt(time)*i) #stochastic diffusion
oridat[a] <- S
s = S
a = a + 1
}
#simulate slight alterations during 3 sequences
altdat <- oridat #create copy of original simulation
altdat[33:45] <- unlist(map(altdat[33:45], ~.x+rnorm(1)*rnorm(1)))
altdat[100:120] <- unlist(map(altdat[100:120], ~.x+rnorm(1)*rnorm(1)))
altdat[220:230] <- unlist(map(altdat[220:230], ~.x+rnorm(1)*rnorm(1)))
#unify original simulation with altered copy and add dates in frame:
dat <- tibble(A = oridat, B = altdat, dates) %>%
gather(key=Source, value = dat, -dates) #convert to tidy long format
ggplot(data=dat, aes(x=dates, y=dat, color=Source)) +
geom_line() +
xlab("Time [days]") +
ylab("Price") +
ggtitle("Raw Price Comparison") +
theme(legend.position="bottom")
head(tibble(A = oridat, B = altdat, dates)) %>% #show both stocks side by side plus dates
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F))
tibble(A = oridat, B = altdat, dates) %>%
gather(key=Source, value = dat, -dates) %>% #!
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
#calculate the difference between both t
diffdat <- tibble(Difference = diff(oridat)-diff(altdat),
dates = dates[1:length(Difference)])
incrementdat <- tibble(A = diff(oridat),
B = diff(altdat),
dates = dates[1:length(B)]) %>%
gather(key=Source, value = dat,-dates)
#create vector from differences for supervised learning
incrementdat$label <- diffdat %>%
mutate(label = as.numeric(Difference!=0), #label creation here
label = ifelse(label==0, NA, 1)) %>%
pull(label)
ggplot(data=incrementdat, aes(x=dates, y=dat, color=Source)) +
geom_line() +
xlab("Time [days]") +
ylab("Price Increment") +
ggtitle("Increments per Timepoint Comparison") +
theme(legend.position="bottom") +
geom_line(shape=15, data = incrementdat,
aes(y = label-5), col= 'red', fill= 'red', size = 2) +
annotate("text", x = as.Date('2018-01-01'), y = -4, label = "Target:", size = 5 )
ggplot(data=diffdat, aes(x=dates, y=Difference)) +
geom_line() +
xlab("Time [days]") +
ylab("Price Increment") +
ggtitle("Differences between increments for determining target timepoints") +
theme(legend.position="bottom")
incrementdat %<>% rename(Increments = dat) %>%
mutate(Source = as.factor(Source)) %>%
mutate(label = replace(label, is.na(label), 0)) %>%
mutate(difference = rep(Increments[Source=='A']-Increments[Source=='B'], 2)) %>%
mutate(weekday = wday(dates)) %>%
mutate(is_week_start =
as.numeric(dates == floor_date(dates, week_start = 1, unit = 'week'))) %>%
# mutate(is_month_start =
#            as.numeric(dates == floor_date(dates, week_start = 1, unit = 'month'))) %>%
mutate(maintenance = rbinom(length(dates),1,0.1)) %>%
mutate(sale = rbinom(length(dates),1,0.3)) %>%
mutate(covariate = rep(covariate[1:(length(dates)/2)], 2))
incrementdat %>%
kable() %>% #for nice html formatting, not relevant in analysis
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive",
full_width = F),
position = "center") %>%
scroll_box(height = "150px")
library(randomForest)
fit <- randomForest(as.factor(label) ~ Source+weekday+is_week_start+maintanence+sale,
data = incrementdat,
importance=TRUE,
ntree=5000)
library(randomForest)
fit <- randomForest(as.factor(label) ~ Source+weekday+is_week_start+maintenence+sale,
data = incrementdat,
importance=TRUE,
ntree=5000)
library(randomForest)
fit <- randomForest(as.factor(label) ~ Source+weekday+is_week_start+maintenance+sale,
data = incrementdat,
importance=TRUE,
ntree=5000)
varImpPlot(fit)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library("devtools")
library('roxygen')
library('roxygen2')
devtools::install_github("klutometis/roxygen")
library("roxygen2")
install.packages("roxygen2")
library("roxygen2")
create("StanDDM")
dir()
setwd(./StanDDM/R/)
setwd('./StanDDM/R/')
document()
library(roxygen2)
document()
library(devtools)
document()
warnings()
StanDDM::init_packages()
StanDDM::init_packages?
?init_packages()
document()
library(StanD)
devtoo::document()
devtools::document()
library(StanDDM)
devtools::document()
?StanDDM::experimental_data_processing()
devtools::document()
?StanDDM::makeFakeParams()
devtools::document()
?StanDDM::simulDat()
devtools::document()
?StanDDM::rmse()
?StanDDM::saveit()
devtools::document()
?StanDDM::saveit()
devtools::document()
?StanDDM::saveit()
?StanDDM::rmse()
devtools::document()
?StanDDM::fit_quality()
devtools::document()
?StanDDM::fit_quality()
devtools::document()
?StanDDM::fit_quality()
devtools::document()
?StanDDM::fit_quality()
?StanDDM::rmse()
